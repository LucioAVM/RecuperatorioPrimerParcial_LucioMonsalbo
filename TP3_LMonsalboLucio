eclipse.preferences.version=1
environment/buildEnvironmentInclude/cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236/CPATH/delimiter=;
environment/buildEnvironmentInclude/cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236/CPATH/operation=remove
environment/buildEnvironmentInclude/cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236/C_INCLUDE_PATH/delimiter=;
environment/buildEnvironmentInclude/cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236/C_INCLUDE_PATH/operation=remove
environment/buildEnvironmentInclude/cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236/append=true
environment/buildEnvironmentInclude/cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236/appendContributed=true
environment/buildEnvironmentLibrary/cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236/LIBRARY_PATH/delimiter=;
environment/buildEnvironmentLibrary/cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236/LIBRARY_PATH/operation=remove
environment/buildEnvironmentLibrary/cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236/append=true
environment/buildEnvironmentLibrary/cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236/appendContributed=true

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project>
	<configuration id="cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236" name="Debug">
		<extension point="org.eclipse.cdt.core.LanguageSettingsProvider">
			<provider copy-of="extension" id="org.eclipse.cdt.ui.UserLanguageSettingsProvider"/>
			<provider-reference id="org.eclipse.cdt.core.ReferencedProjectsLanguageSettingsProvider" ref="shared-provider"/>
			<provider-reference id="org.eclipse.cdt.managedbuilder.core.MBSLanguageSettingsProvider" ref="shared-provider"/>
			<provider class="org.eclipse.cdt.managedbuilder.internal.language.settings.providers.GCCBuiltinSpecsDetectorMinGW" console="false" env-hash="766132112434618236" id="org.eclipse.cdt.managedbuilder.core.GCCBuiltinSpecsDetectorMinGW" keep-relative-paths="false" name="CDT GCC Built-in Compiler Settings MinGW" parameter="${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;" prefer-non-shared="true">
				<language-scope id="org.eclipse.cdt.core.gcc"/>
				<language-scope id="org.eclipse.cdt.core.g++"/>
			</provider>
		</extension>
	</configuration>
	<configuration id="cdt.managedbuild.config.gnu.mingw.exe.release.441308646" name="Release">
		<extension point="org.eclipse.cdt.core.LanguageSettingsProvider">
			<provider copy-of="extension" id="org.eclipse.cdt.ui.UserLanguageSettingsProvider"/>
			<provider-reference id="org.eclipse.cdt.core.ReferencedProjectsLanguageSettingsProvider" ref="shared-provider"/>
			<provider-reference id="org.eclipse.cdt.managedbuilder.core.MBSLanguageSettingsProvider" ref="shared-provider"/>
			<provider class="org.eclipse.cdt.managedbuilder.internal.language.settings.providers.GCCBuiltinSpecsDetectorMinGW" console="false" env-hash="766132112434618236" id="org.eclipse.cdt.managedbuilder.core.GCCBuiltinSpecsDetectorMinGW" keep-relative-paths="false" name="CDT GCC Built-in Compiler Settings MinGW" parameter="${COMMAND} ${FLAGS} -E -P -v -dD &quot;${INPUTS}&quot;" prefer-non-shared="true">
				<language-scope id="org.eclipse.cdt.core.gcc"/>
				<language-scope id="org.eclipse.cdt.core.g++"/>
			</provider>
		</extension>
	</configuration>
</project>
#include "LinkedList.h"


#ifndef employee_H_INCLUDED
#define employee_H_INCLUDED
typedef struct
{
    int id;
    char nombre[128];
    int horasTrabajadas;
    int sueldo;
}Employee;

Employee* employee_new();
Employee* employee_newParametros(char* idStr,char* nombreStr,char* horasTrabajadasStr);
void employee_delete();

int employee_setId(Employee* this,int id);
int employee_getId(Employee* this,int* id);

int employee_setNombre(Employee* this,char* nombre);
int employee_getNombre(Employee* this,char* nombre);

int employee_setHorasTrabajadas(Employee* this,int horasTrabajadas);
int employee_getHorasTrabajadas(Employee* this,int* horasTrabajadas);

int employee_setSueldo(Employee* this,int sueldo);
int employee_getSueldo(Employee* this,int* sueldo);

int cargar_idEmpleado(void);
int cargar_nuevoId(void);

#endif // employee_H_INCLUDED

/*
    utest example : Unit test examples.
    Copyright (C) <2018>  <Mauricio Davila>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef __LINKEDLIST
#define __LINKEDLIST
struct Node
{
    void* pElement;
    struct Node* pNextNode;
}typedef Node;

struct LinkedList// size=------pFileNode=puntero del anterior o del mismo------p
{
    Node* pFirstNode;
    int size;
}typedef LinkedList;
#endif



//Publicas
LinkedList* ll_newLinkedList(void);//crea nueva

int ll_len(LinkedList* this);// mide cantidad

Node* test_getNode(LinkedList* this, int nodeIndex);///nodo completo

int test_addNode(LinkedList* this, int nodeIndex,void* pElement);//Agrega y enlaza un nuevo nodo a la lista

int ll_add(LinkedList* this, void* pElement);//Agrega un elemento a la lista

void* ll_get(LinkedList* this, int index);

int ll_set(LinkedList* this, int index,void* pElement);

int ll_remove(LinkedList* this,int index);// sacar linked

int ll_clear(LinkedList* this);//

int ll_deleteLinkedList(LinkedList* this);// sacar todas

int ll_indexOf(LinkedList* this, void* pElement);
int ll_isEmpty(LinkedList* this);
int ll_push(LinkedList* this, int index, void* pElement);
void* ll_pop(LinkedList* this,int index);
int ll_contains(LinkedList* this, void* pElement);
int ll_containsAll(LinkedList* this,LinkedList* this2);
LinkedList* ll_subList(LinkedList* this,int from,int to);
LinkedList* ll_clone(LinkedList* this);

int ll_sort(LinkedList* this, int (*pFunc)(void* ,void*), int order);

#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "Controller.h"
#include "Employee.h"

/****************************************************
    Menu:
     1. Cargar los datos de los empleados desde el archivo data.csv (modo texto).
     2. Cargar los datos de los empleados desde el archivo data.csv (modo binario).
     3. Alta de empleado
     4. Modificar datos de empleado
     5. Baja de empleado
     6. Listar empleados
     7. Ordenar empleados
     8. Guardar los datos de los empleados en el archivo data.csv (modo texto).
     9. Guardar los datos de los empleados en el archivo data.csv (modo binario).
    10. Salir
*****************************************************/



int main()
{
    int opcion;
    int validacion;
    int primeroTexto;
    char path[30];

    primeroTexto = 0;
    opcion = 0;

    LinkedList* listaEmpleados = ll_newLinkedList();
    do{
    	printf("Menu:"
    			"1. Cargar los datos de los empleados desde el archivo data.csv (modo texto)."
    			"2. Cargar los datos de los empleados desde el archivo data.csv (modo binario)."
    			"3. Alta de empleado"
    			"4. Modificar datos de empleado"
    			"5. Baja de empleado"
    			"6. Listar empleados"
    			"7. Ordenar empleados"
    			"8. Guardar los datos de los empleados en el archivo data.csv (modo texto)."
    			"9. Guardar los datos de los empleados en el archivo data.csv (modo binario)."
    			"10. Salir");
    	scanf("%d",opcion);
        switch(opcion)
        {
            case 1://CARGAR TEXTO

            	printf("ingrese el nombre del archivo que desea abrir");
            	scanf("%s",path);

                controller_cargarDesdeTexto(path,listaEmpleados);
                primeroTexto = 1;
                break;


            case 2://CARGAR BINARIO

            	if(primeroTexto == 0)
            	{
            		printf("primero se debe cargar por lo menos una ves el archivo en formato texto");
            	}else{
            		controller_cargarDesdeBinario("data.csv",listaEmpleados);
            	}
            	break;


            case 3://ALTA
            	controller_altaEmpleado(listaEmpleados);
            	break;


            case 4://BAJA

            	break;


            case 5://MODIFICACION
            	break;


            case 6://LISTA
            	controller_listaEmpleados(listaEmpleados);
            	break;


            case 7://ORDENAR (POR   NOMBRE---ID---HORAS---SUELDO)
            	break;


            case 8://GUARDAR TEXTO  //W
            	break;//FPRINTF


            case 9://GUARDAR BINARIO //WV CAMBIAR NOMBRE A .BIN
            	break;// FWRITE


            case 10://SALIR (HACER DESPEDIDA)
            	break;///SI CARGO Y GUARDO SI
        }
        if(validacion == 1)
        {
        	//printf("");
        }
    }while(opcion == 10);
    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "Employee.h"

/** \brief Parsea los datos los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int parser_EmployeeFromText(FILE* pFile , LinkedList* pArrayListEmployee)
{
	int retorno;
	char id[1000];
	char nombre[1000];
	char horasTrabajadas[1000];
	char sueldo;
	Employee* pEmpleados;
	int validacionSueldo;
	int contador;

	contador = 0;
	retorno = -1;

	if(pFile != NULL && pArrayListEmployee != NULL)
	{
		fscanf(pFile,"%[^,],%[^,],%[^,],%[^\n]\n",id, nombre, horasTrabajadas,sueldo);//falsa lectura

		do
		{
			contador++;
			if(fscanf(pFile,"%[^,],%[^,],%[^,],%[^\n]\n",id, nombre, horasTrabajadas,sueldo)==4)
			{
				pEmpleados = employee_newParametros(id, nombre, horasTrabajadas);
				validacionSueldo = employee_setSueldo(pEmpleados, sueldo);
				if(validacionSueldo !=0)
				{
					break;
				}else{
					retorno = 0;
				}
			}
		}while(!feof(pFile));

	}
    return retorno;
}

/** \brief Parsea los datos los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int parser_EmployeeFromBinary(FILE* pFile , LinkedList* pArrayListEmployee)
{
	int retorno;
		char id[1000];
		char nombre[1000];
		char horasTrabajadas[1000];
		char sueldo;
		Employee* pEmpleados;
		int validacionSueldo;
		int contador;

		contador = 0;
		retorno = -1;

		if(pFile != NULL && pArrayListEmployee != NULL)
		{
			fscanf(pFile,"%[^,],%[^,],%[^,],%[^\n]\n",id, nombre, horasTrabajadas,sueldo);//falsa lectura

			do
			{
				contador++;
				if(fscanf(pFile,"%[^,],%[^,],%[^,],%[^\n]\n",id, nombre, horasTrabajadas,sueldo)==4)
				{
					pEmpleados = employee_newParametros(id, nombre, horasTrabajadas);
					validacionSueldo = employee_setSueldo(pEmpleados, sueldo);
					if(validacionSueldo !=0)
					{
						break;
					}else{
						retorno = 0;
					}
				}
			}while(!feof(pFile));

		}
	    return retorno;
}

#include "utn.h"



                              //VALIDACIONES NUMEROS//
int getFloat(char* resultado, char *mensaje, char* mensajeError, int minimo, int maximo,int reintentos)
{
	int retorno;
	float auxiliarFloat;
	int i;

	retorno =-1;

	if(resultado!=NULL && mensaje!=NULL && mensajeError!=NULL && minimo<=maximo && reintentos>=0)
	{
		for(reintentos=i;i<=0;i--)
		{
			printf("%s",mensaje);
			fflush("stdin");
			scanf("%f",&resultado);
			if(resultado>minimo && resultado<maximo)
			{
				auxiliarFloat=*resultado;
				retorno = 0;
				break;
			}else{
				printf("\nEl numero ingresado no esta dentro del limite(%d-%d), intente nuevamente\n",minimo,maximo);
			}
		}
	}
    return retorno;
}


int getInt(char* resultado, char *mensaje, char* mensajeError, int minimo, int maximo,int reintentos)
{
	int retorno;
	int auxiliarInt;

	retorno =-1;

	if(resultado!=NULL && mensaje!=NULL && mensajeError!=NULL && minimo>=maximo && reintentos>=0)
	{
		for(reintentos;reintentos<=0;reintentos--)
		{
			printf("%s",mensaje);
			fflush("stdin");
			scanf("%d",&resultado);
			if(resultado>minimo && resultado<maximo)
			{
				auxiliarInt=*resultado;
				retorno = 0;
				break;
			}else{
				printf("\nEl numero ingresado no esta dentro del limite(%d-%d), intente nuevamente\n",minimo, maximo);
			}
		}
	}
    return retorno;
}




int getChar(char* resultado, char *mensaje, char* mensajeError, int minimo,int maximo,int reintentos)
{
	int retorno;
	int auxiliarChar;

	retorno =-1;

	if(resultado!=NULL && mensaje!=NULL && mensajeError!=NULL && minimo>=maximo && reintentos>=0)
	{
		for(reintentos;reintentos<=0;reintentos--)
		{
			printf("%s",mensaje);
			fflush("stdin");
			scanf("%c",&resultado);
			if(resultado>minimo && resultado<maximo)
			{
				auxiliarChar=*resultado;
				retorno = 0;
				break;
			}else{
				printf("\nLa palabra ingresada no esta dentro del limite(%d-%d), intente nuevamente\n",minimo ,maximo);
			}
		}
	}
    return retorno;
}



char getNumeroAleatorio(int desde , int hasta, int iniciar)
{
    if(iniciar)
        srand (time(NULL));
    return desde + (rand() % (hasta + 1 - desde)) ;
}

/**
 * \brief Solicita un texto al usuario y lo devuelve
 * \param mensaje Es el mensaje a ser mostrado
 * \param input Array donde se cargar� el texto ingresado
 * \return void
 */

void getString(char mensaje[],char input[])
{
    printf("%s",mensaje);
    scanf ("%s", input);
}


int getStringLetras(char mensaje[],char input[])
{
    char aux[256];
    int retorno;

    getString(mensaje,aux);
    if(soloLetras(aux))
    {
        strcpy(input,aux);
        retorno = 0;
    }
    return 0;
}


int soloLetras(char str[])
{
   int i=0;
   int retorno;

   retorno = -1;

   while(str[i] != '\0')
   {
       if((str[i] != ' ') && (str[i] < 'a' || str[i] > 'z') && (str[i] < 'A' || str[i] > 'Z'))
           retorno = 0;
       i++;
   }
   return retorno;
}


int getNumeros(char mensaje[],char input[])
{
    char aux[256];
    int  retorno;

    retorno = -1;

    getString(mensaje,aux);
    if(esNumerico(aux))
    {
        strcpy(input,atoi(aux));
        retorno = 0;
    }
    return retorno;
}

int esNumerico(int* pNumero)
{
	int i;
	int retorno;

	while(pNumero[i] != '\0')
	{
		if((pNumero[i] != ' ') && (pNumero[i] < '9' || pNumero[i] > '0'))
		{
			retorno = 0;
		}
		i++;
	}
	return retorno;
}




#include <stdio.h>
#include <stdlib.h>

/**
 * \brief Solicita un n�mero al usuario y devuelve el resultado
 * \param mensaje Es el mensaje a ser mostrado
 * \return El n�mero ingresado por el usuario
 *
 */
int getFloat(char* resultado, char *mensaje, char* mensajeError, int minimo, int maximo,int reintentos);

/**
 * \brief Solicita un n�mero al usuario y devuelve el resultado
 * \param mensaje Es el mensaje a ser mostrado
 * \return El n�mero ingresado por el usuario
 *
 */
int getInt(char* resultado, char *mensaje, char* mensajeError, int minimo, int maximo,int reintentos);


/**
 * \brief Solicita un caracter al usuario y devuelve el resultado
 * \param mensaje Es el mensaje a ser mostrado
 * \return El caracter ingresado por el usuario
 *
 */
int getChar(char* resultado, char *mensaje, char* mensajeError, int minimo,int maximo,int reintentos);


/**
 * \brief Genera un n�mero aleatorio
 * \param desde N�mero aleatorio m�nimo
 * \param hasta N�mero aleatorio m�ximo
 * \param iniciar Indica si se trata del primer n�mero solicitado 1 indica que si
 * \return retorna el n�mero aleatorio generado
 *
 */
char getNumeroAleatorio(int desde , int hasta, int iniciar);


/**
 * \brief Solicita un texto al usuario y lo devuelve
 * \param mensaje Es el mensaje a ser mostrado
 * \param input Array donde se cargar� el texto ingresado
 * \return void
 */
void getString(char mensaje[],char input[]);


/**
 * \brief Solicita un texto al usuario y lo devuelve
 * \param mensaje Es el mensaje a ser mostrado
 * \param input Array donde se cargar� el texto ingresado
 * \return 1 si el texto contiene solo letras
 */
int getStringLetras(char mensaje[],char input[]);


/**
 * \brief Verifica si el valor recibido contiene solo letras
 * \param str Array con la cadena a ser analizada
 * \return 1 si contiene solo ' ' y letras y 0 si no lo es
 *
 */
int soloLetras(char str[]);


/**
 * \brief Solicita un texto num�rico al usuario y lo devuelve
 * \param mensaje Es el mensaje a ser mostrado
 * \param input Array donde se cargar� el texto ingresado
 * \return 1 si el texto contiene solo n�meros
 */
int getNumeros(char mensaje[],char input[]);




<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?fileVersion 4.0.0?><cproject storage_type_id="org.eclipse.cdt.core.XmlProjectDescriptionStorage">
	<storageModule moduleId="org.eclipse.cdt.core.settings">
		<cconfiguration id="cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236">
			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236" moduleId="org.eclipse.cdt.core.settings" name="Debug">
				<externalSettings/>
				<extensions>
					<extension id="org.eclipse.cdt.core.PE" point="org.eclipse.cdt.core.BinaryParser"/>
					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
				</extensions>
			</storageModule>
			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
				<configuration artifactName="${ProjName}" buildArtefactType="org.eclipse.cdt.build.core.buildArtefactType.exe" buildProperties="org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe,org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug" cleanCommand="rm -rf" description="" id="cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236" name="Debug" optionalBuildProperties="org.eclipse.cdt.docker.launcher.containerbuild.property.selectedvolumes=,org.eclipse.cdt.docker.launcher.containerbuild.property.volumes=" parent="cdt.managedbuild.config.gnu.mingw.exe.debug">
					<folderInfo id="cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236." name="/" resourcePath="">
						<toolChain id="cdt.managedbuild.toolchain.gnu.mingw.exe.debug.1286346785" name="MinGW GCC" superClass="cdt.managedbuild.toolchain.gnu.mingw.exe.debug">
							<targetPlatform id="cdt.managedbuild.target.gnu.platform.mingw.exe.debug.291777292" name="Debug Platform" superClass="cdt.managedbuild.target.gnu.platform.mingw.exe.debug"/>
							<builder buildPath="${workspace_loc:/pruebaTp3}/Debug" id="cdt.managedbuild.tool.gnu.builder.mingw.base.481712386" keepEnvironmentInBuildfile="false" managedBuildOn="true" name="CDT Internal Builder" superClass="cdt.managedbuild.tool.gnu.builder.mingw.base"/>
							<tool id="cdt.managedbuild.tool.gnu.assembler.mingw.exe.debug.1711396179" name="GCC Assembler" superClass="cdt.managedbuild.tool.gnu.assembler.mingw.exe.debug">
								<inputType id="cdt.managedbuild.tool.gnu.assembler.input.763323036" superClass="cdt.managedbuild.tool.gnu.assembler.input"/>
							</tool>
							<tool id="cdt.managedbuild.tool.gnu.archiver.mingw.base.346330440" name="GCC Archiver" superClass="cdt.managedbuild.tool.gnu.archiver.mingw.base"/>
							<tool id="cdt.managedbuild.tool.gnu.cpp.compiler.mingw.exe.debug.1144664523" name="GCC C++ Compiler" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.mingw.exe.debug">
								<option id="gnu.cpp.compiler.mingw.exe.debug.option.optimization.level.1068653394" name="Optimization Level" superClass="gnu.cpp.compiler.mingw.exe.debug.option.optimization.level" useByScannerDiscovery="false" value="gnu.cpp.compiler.optimization.level.none" valueType="enumerated"/>
								<option defaultValue="gnu.cpp.compiler.debugging.level.max" id="gnu.cpp.compiler.mingw.exe.debug.option.debugging.level.1164208047" name="Debug Level" superClass="gnu.cpp.compiler.mingw.exe.debug.option.debugging.level" useByScannerDiscovery="false" valueType="enumerated"/>
							</tool>
							<tool id="cdt.managedbuild.tool.gnu.c.compiler.mingw.exe.debug.1330192367" name="GCC C Compiler" superClass="cdt.managedbuild.tool.gnu.c.compiler.mingw.exe.debug">
								<option defaultValue="gnu.c.optimization.level.none" id="gnu.c.compiler.mingw.exe.debug.option.optimization.level.648021827" name="Optimization Level" superClass="gnu.c.compiler.mingw.exe.debug.option.optimization.level" useByScannerDiscovery="false" valueType="enumerated"/>
								<option defaultValue="gnu.c.debugging.level.max" id="gnu.c.compiler.mingw.exe.debug.option.debugging.level.607965310" name="Debug Level" superClass="gnu.c.compiler.mingw.exe.debug.option.debugging.level" useByScannerDiscovery="false" valueType="enumerated"/>
								<inputType id="cdt.managedbuild.tool.gnu.c.compiler.input.1755757145" superClass="cdt.managedbuild.tool.gnu.c.compiler.input"/>
							</tool>
							<tool id="cdt.managedbuild.tool.gnu.c.linker.mingw.exe.debug.1535795466" name="MinGW C Linker" superClass="cdt.managedbuild.tool.gnu.c.linker.mingw.exe.debug">
								<option IS_BUILTIN_EMPTY="false" IS_VALUE_EMPTY="false" id="gnu.c.link.option.libs.944170741" name="Libraries (-l)" superClass="gnu.c.link.option.libs" useByScannerDiscovery="false" valueType="libs">
									<listOptionValue builtIn="false" value="LinkedList"/>
								</option>
								<option IS_BUILTIN_EMPTY="false" IS_VALUE_EMPTY="false" id="gnu.c.link.option.paths.2062322424" name="Library search path (-L)" superClass="gnu.c.link.option.paths" useByScannerDiscovery="false" valueType="libPaths">
									<listOptionValue builtIn="false" value="&quot;${workspace_loc:/${ProjName}}&quot;"/>
								</option>
								<inputType id="cdt.managedbuild.tool.gnu.c.linker.input.1509662977" superClass="cdt.managedbuild.tool.gnu.c.linker.input">
									<additionalInput kind="additionalinputdependency" paths="$(USER_OBJS)"/>
									<additionalInput kind="additionalinput" paths="$(LIBS)"/>
								</inputType>
							</tool>
							<tool id="cdt.managedbuild.tool.gnu.cpp.linker.mingw.exe.debug.1668455214" name="MinGW C++ Linker" superClass="cdt.managedbuild.tool.gnu.cpp.linker.mingw.exe.debug"/>
						</toolChain>
					</folderInfo>
				</configuration>
			</storageModule>
			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
		</cconfiguration>
		<cconfiguration id="cdt.managedbuild.config.gnu.mingw.exe.release.441308646">
			<storageModule buildSystemId="org.eclipse.cdt.managedbuilder.core.configurationDataProvider" id="cdt.managedbuild.config.gnu.mingw.exe.release.441308646" moduleId="org.eclipse.cdt.core.settings" name="Release">
				<externalSettings/>
				<extensions>
					<extension id="org.eclipse.cdt.core.PE" point="org.eclipse.cdt.core.BinaryParser"/>
					<extension id="org.eclipse.cdt.core.GASErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
					<extension id="org.eclipse.cdt.core.GLDErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
					<extension id="org.eclipse.cdt.core.GCCErrorParser" point="org.eclipse.cdt.core.ErrorParser"/>
				</extensions>
			</storageModule>
			<storageModule moduleId="cdtBuildSystem" version="4.0.0">
				<configuration artifactName="${ProjName}" buildArtefactType="org.eclipse.cdt.build.core.buildArtefactType.exe" buildProperties="org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe,org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.release" cleanCommand="rm -rf" description="" id="cdt.managedbuild.config.gnu.mingw.exe.release.441308646" name="Release" optionalBuildProperties="" parent="cdt.managedbuild.config.gnu.mingw.exe.release">
					<folderInfo id="cdt.managedbuild.config.gnu.mingw.exe.release.441308646." name="/" resourcePath="">
						<toolChain id="cdt.managedbuild.toolchain.gnu.mingw.exe.release.1003325164" name="MinGW GCC" superClass="cdt.managedbuild.toolchain.gnu.mingw.exe.release">
							<targetPlatform id="cdt.managedbuild.target.gnu.platform.mingw.exe.release.1245272979" name="Debug Platform" superClass="cdt.managedbuild.target.gnu.platform.mingw.exe.release"/>
							<builder buildPath="${workspace_loc:/pruebaTp3}/Release" id="cdt.managedbuild.tool.gnu.builder.mingw.base.1667186329" keepEnvironmentInBuildfile="false" managedBuildOn="true" name="CDT Internal Builder" superClass="cdt.managedbuild.tool.gnu.builder.mingw.base"/>
							<tool id="cdt.managedbuild.tool.gnu.assembler.mingw.exe.release.1750001549" name="GCC Assembler" superClass="cdt.managedbuild.tool.gnu.assembler.mingw.exe.release">
								<inputType id="cdt.managedbuild.tool.gnu.assembler.input.210068128" superClass="cdt.managedbuild.tool.gnu.assembler.input"/>
							</tool>
							<tool id="cdt.managedbuild.tool.gnu.archiver.mingw.base.11695744" name="GCC Archiver" superClass="cdt.managedbuild.tool.gnu.archiver.mingw.base"/>
							<tool id="cdt.managedbuild.tool.gnu.cpp.compiler.mingw.exe.release.1357934880" name="GCC C++ Compiler" superClass="cdt.managedbuild.tool.gnu.cpp.compiler.mingw.exe.release">
								<option id="gnu.cpp.compiler.mingw.exe.release.option.optimization.level.634132717" name="Optimization Level" superClass="gnu.cpp.compiler.mingw.exe.release.option.optimization.level" useByScannerDiscovery="false" value="gnu.cpp.compiler.optimization.level.most" valueType="enumerated"/>
								<option defaultValue="gnu.cpp.compiler.debugging.level.none" id="gnu.cpp.compiler.mingw.exe.release.option.debugging.level.515040856" name="Debug Level" superClass="gnu.cpp.compiler.mingw.exe.release.option.debugging.level" useByScannerDiscovery="false" valueType="enumerated"/>
							</tool>
							<tool id="cdt.managedbuild.tool.gnu.c.compiler.mingw.exe.release.1243151672" name="GCC C Compiler" superClass="cdt.managedbuild.tool.gnu.c.compiler.mingw.exe.release">
								<option defaultValue="gnu.c.optimization.level.most" id="gnu.c.compiler.mingw.exe.release.option.optimization.level.691694515" name="Optimization Level" superClass="gnu.c.compiler.mingw.exe.release.option.optimization.level" useByScannerDiscovery="false" valueType="enumerated"/>
								<option defaultValue="gnu.c.debugging.level.none" id="gnu.c.compiler.mingw.exe.release.option.debugging.level.1363436272" name="Debug Level" superClass="gnu.c.compiler.mingw.exe.release.option.debugging.level" useByScannerDiscovery="false" valueType="enumerated"/>
								<inputType id="cdt.managedbuild.tool.gnu.c.compiler.input.1648967370" superClass="cdt.managedbuild.tool.gnu.c.compiler.input"/>
							</tool>
							<tool id="cdt.managedbuild.tool.gnu.c.linker.mingw.exe.release.2030811607" name="MinGW C Linker" superClass="cdt.managedbuild.tool.gnu.c.linker.mingw.exe.release">
								<inputType id="cdt.managedbuild.tool.gnu.c.linker.input.1919164395" superClass="cdt.managedbuild.tool.gnu.c.linker.input">
									<additionalInput kind="additionalinputdependency" paths="$(USER_OBJS)"/>
									<additionalInput kind="additionalinput" paths="$(LIBS)"/>
								</inputType>
							</tool>
							<tool id="cdt.managedbuild.tool.gnu.cpp.linker.mingw.exe.release.1936226405" name="MinGW C++ Linker" superClass="cdt.managedbuild.tool.gnu.cpp.linker.mingw.exe.release"/>
						</toolChain>
					</folderInfo>
				</configuration>
			</storageModule>
			<storageModule moduleId="org.eclipse.cdt.core.externalSettings"/>
		</cconfiguration>
	</storageModule>
	<storageModule moduleId="cdtBuildSystem" version="4.0.0">
		<project id="pruebaTp3.cdt.managedbuild.target.gnu.mingw.exe.771458613" name="Executable" projectType="cdt.managedbuild.target.gnu.mingw.exe"/>
	</storageModule>
	<storageModule moduleId="scannerConfiguration">
		<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.mingw.exe.release.441308646;cdt.managedbuild.config.gnu.mingw.exe.release.441308646.;cdt.managedbuild.tool.gnu.c.compiler.mingw.exe.release.1243151672;cdt.managedbuild.tool.gnu.c.compiler.input.1648967370">
			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
		</scannerConfigBuildInfo>
		<scannerConfigBuildInfo instanceId="cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236;cdt.managedbuild.config.gnu.mingw.exe.debug.1079970236.;cdt.managedbuild.tool.gnu.c.compiler.mingw.exe.debug.1330192367;cdt.managedbuild.tool.gnu.c.compiler.input.1755757145">
			<autodiscovery enabled="true" problemReportingEnabled="true" selectedProfileId=""/>
		</scannerConfigBuildInfo>
	</storageModule>
	<storageModule moduleId="org.eclipse.cdt.core.LanguageSettingsProviders"/>
	<storageModule moduleId="org.eclipse.cdt.make.core.buildtargets"/>
	<storageModule moduleId="refreshScope"/>
</cproject>

/Debug/

<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
	<name>pruebaTp3</name>
	<comment></comment>
	<projects>
	</projects>
	<buildSpec>
		<buildCommand>
			<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>
			<triggers>clean,full,incremental,</triggers>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>
			<triggers>full,incremental,</triggers>
			<arguments>
			</arguments>
		</buildCommand>
	</buildSpec>
	<natures>
		<nature>org.eclipse.cdt.core.cnature</nature>
		<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>
		<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>
	</natures>
</projectDescription>

#include "Controller.h"


/** \brief Carga los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_cargarDesdeTexto(char* path , LinkedList* pArrayListEmployee)
{
	FILE* pFile;
	pFile = fopen(path,"r");
	int cantidadLeida;
	int retorno;
	char auxiliarDatosChar[50];
	int validacion;

	if(pFile == NULL && pArrayListEmployee == NULL)
	{
		printf("ERROR, el archivo no puedo ser abierto");
	}else{

		cantidadLeida = fread(auxiliarDatosChar, sizeof(pArrayListEmployee), 1, pFile);

		if(cantidadLeida != sizeof(pArrayListEmployee))
		{
			retorno = -1;
		}

		validacion = ll_add(pArrayListEmployee, pFile);
		if(validacion!=0)
		{
			printf("ERROR, no se pudo cargar correctamente los datos");
		}
	}

	// DEVOLVER ID MAS GRANDE POR RETORNO O SI SE COMPLICA EN ALGO ARCHIVO CON ID

	fclose(path);

    return 1;
}// ABRE,COPIA Y CIERRA.

/** \brief Carga los datos de los empleados desde el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_cargarDesdeBinario(char* path , LinkedList* pArrayListEmployee)
{
	pArrayListEmployee = fopen("data.csv","rb");

	if(pArrayListEmployee==NULL)//SI O SI TIENE QUE PASAR POR LA DE TEXTO Y GUARDAR BINARIO
	{
		printf("ERROR, el archivo no puede ser abierto");
	}
    return 1;
}

/** \brief Alta de empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_altaEmpleado(LinkedList* pArrayListEmployee)// fprintf
{
	int retorno;
	int idEmpleado;
	char nombre[50];
	int horasTrabajadas;
	int sueldo;
	Employee* empleado;
	int validacionNombre;
	int validacionHorasTrabajadas;
	int validacionSueldo;

	empleado = NULL;
	retorno = -1;

	if(pArrayListEmployee != NULL)
	{
		do
		{
			validacionNombre = getStringLetras("ingrese nombre del empleado", nombre);
			if(validacionNombre!=0)
			{
				printf("no se pudo cargar correctamente el nombre");
			}
		}while(validacionNombre != 0);

		do
		{
			validacionHorasTrabajadas = getNumeros("ingrese la cantidad de horas trabajadas del empleado",horasTrabajadas);
			if(validacionHorasTrabajadas!=0)
			{
				printf("no se pudo cargar correctamente las horas trabajadas");
			}
		}while(validacionHorasTrabajadas != 0);

		do
		{
			validacionSueldo = getNumeros("ingrese el sueldo del empleado",sueldo);
			if(validacionSueldo!=0)
			{
				printf("no se pudo cargar correctamente sueldo");
			}
		}while(validacionSueldo != 0);

		empleado = employee_new();
		idEmpleado = cargar_nuevoId();

		empleado = employee_newParametros(idEmpleado, nombre, horasTrabajadas);
		validacionSueldo = employee_setSueldo(empleado, sueldo);


	}
    return 1;//VALIDAR QUE ESTE ABIERTO EL ARCHIVO ANTES
}

/** \brief Modificar datos de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_modificarEmpleado(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Baja de empleado
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_bajaEmpleado(LinkedList* pArrayListEmployee)
{


    return 1;
}

/** \brief Listar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_listaEmpleados(LinkedList* pArrayListEmployee)
{
	Employee empleados;
	int i;
	int tamEmpleados;
	int validacion;
	int retorno;

	retorno = -1;

	if(pArrayListEmployee != NULL)
	{
		tamEmpleados = ll_len(pArrayListEmployee);

		for(i=0;i<tamEmpleados;i++)
		{
			printf("/n**********************************************"
					"%d           %s             %d            %d"
					"*********************************************/n",empleados[i].id, empleados[i].nombre,empleados[i].horasTrabajadas, empleados[i].sueldo);
		}
		retorno = 0;
	}
    return retorno;
}

/** \brief Ordenar empleados
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_ordenarEmpleados(LinkedList* pArrayListEmployee)
{
    return 1;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo texto).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_guardarComoTexto(char* path , LinkedList* pArrayListEmployee)
{
	int retorno;

	FILE* pArchivoTexto;
	Employee* empleado;
	int tam;
	int i;

	retorno = -1;
	tam = ll_len(pArrayListEmployee);

	if(path != NULL && pArrayListEmployee !=NULL)
	{
		pArchivoTexto = fopen(path,"w");

		if(pArchivoTexto !=NULL)
		{
			for(i=0;i<tam;i++)
			{
				empleado = (Employee*)ll_get(pArrayListEmployee,i);
				fwrite(empleado,sizeof(Employee),1,pArchivoTexto);
			}
		}
		fclose(pArchivoTexto);
		retorno = 0;
	}
	return retorno;
}

/** \brief Guarda los datos de los empleados en el archivo data.csv (modo binario).
 *
 * \param path char*
 * \param pArrayListEmployee LinkedList*
 * \return int
 *
 */
int controller_guardarComoBinario(char* path , LinkedList* pArrayListEmployee)
{
	int retorno;
	FILE* pArchivoBinario;
	Employee* empleado;
	int tam;
	int i;


	retorno = -1;
	tam = ll_len(pArrayListEmployee);

	if(path != NULL && pArrayListEmployee !=NULL)
	{
		pArchivoBinario = fopen(path,"wb");

		if(pArchivoBinario !=NULL)
		{
			for(i=0;i<tam;i++)
			{
				empleado = (Employee*)ll_get(pArrayListEmployee,i);
				fwrite(empleado,sizeof(Employee),1,pArchivoBinario);
			}
		}
		fclose(pArchivoBinario);
		retorno = 0;
	}
    return retorno;
}


#include "LinkedList.h"
#include "Employee.h"
#include "parser.c"

int controller_cargarDesdeTexto(char* path , LinkedList* pArrayListEmployee);//MUY IMPORTANTE SUELDO

int controller_cargarDesdeBinario(char* path , LinkedList* pArrayListEmployee);//MUY IMPORTANTE SUELDO

int controller_altaEmpleado(LinkedList* pArrayListEmployee);//MUY IMPORTANTE SUELDO

int controller_modificarEmpleado(LinkedList* pArrayListEmployee);//MUY IMPORTANTE SUELDO

int controller_bajaEmpleado(LinkedList* pArrayListEmployee);//MUY IMPORTANTE SUELDO

int controller_listaEmpleados(LinkedList* pArrayListEmployee);

int controller_ordenarEmpleados(LinkedList* pArrayListEmployee);

int controller_guardarComoTexto(char* path , LinkedList* pArrayListEmployee);

int controller_guardarComoBinario(char* path , LinkedList* pArrayListEmployee);



id,nombre,horasTrabajadas,sueldo
1,Lou,120,10000
2,Ulrike,180,25000
3,Brade,325,20000
4,Kimbell,120,50000
5,Sheelagh,220,18000
6,Gayle,120,30000
7,Kimberlee,60,33000
8,Henrieta,90,30000
9,Jeanine,325,18000
10,Aggie,75,15000
11,Brandea,180,15000
12,Cordelie,325,50000
13,Shel,120,50000
14,Bronnie,60,20000
15,Megen,180,10000
16,Iver,90,12000
17,Ernesta,60,37000
18,Cirillo,88,50000
19,Park,120,30000
20,Bellanca,88,15000
21,Bobbye,180,15000
22,Eugene,88,50000
23,Johnny,325,33000
24,Reagen,90,42000
25,Braden,180,25000
26,Karim,75,25000
27,Anthea,90,42000
28,Doro,120,33000
29,Gaye,120,37000
30,Toby,180,15000
31,Franny,325,15000
32,Katey,180,42000
33,Earle,90,10000
34,Redd,88,42000
35,Jehanna,220,50000
36,Cristie,180,10000
37,Stefa,88,42000
38,Roda,90,25000
39,Alfredo,88,10000
40,Sydney,75,10000
41,Brnaba,180,30000
42,Ame,88,50000
43,Bradney,88,25000
44,Margarete,120,50000
45,Nikoletta,120,50000
46,Lonnard,75,50000
47,Raine,180,30000
48,Noella,120,15000
49,Dagmar,88,25000
50,Carroll,220,42000
51,Marion,88,50000
52,Carline,220,12000
53,Hyacinthie,75,15000
54,Julina,120,33000
55,Corina,220,37000
56,Bernardine,75,33000
57,Homer,180,18000
58,Lianna,220,12000
59,Celene,120,50000
60,Kori,90,50000
61,Deeyn,88,20000
62,Marysa,75,20000
63,Loy,120,15000
64,Gabbey,120,37000
65,Star,90,33000
66,Dominica,120,33000
67,Blanch,75,15000
68,Cristobal,120,15000
69,Paulita,120,50000
70,Sayre,180,33000
71,Shaughn,90,15000
72,Katrine,90,25000
73,Cristi,88,42000
74,Cristie,90,25000
75,Solomon,90,10000
76,Nananne,120,33000
77,Sacha,90,25000
78,Morse,180,25000
79,Roland,180,25000
80,Jesselyn,180,30000
81,Kylila,325,12000
82,Kendre,180,25000
83,Lesya,90,15000
84,Tatiania,120,20000
85,Trenton,88,12000
86,Angie,90,20000
87,Joelle,90,37000
88,George,60,30000
89,Guenevere,90,30000
90,Margaretha,75,10000
91,Sully,60,15000
92,Lonni,220,50000
93,Nicky,180,42000
94,My,90,18000
95,Kyrstin,90,37000
96,Martino,75,15000
97,Marcellus,88,50000
98,Jacquelin,120,30000
99,Aleda,90,50000
100,Georgeta,88,10000
101,Marcille,88,10000
102,Ertha,88,10000
103,Desiri,120,25000
104,Geneva,90,33000
105,Kilian,120,42000
106,Nance,75,10000
107,Gaven,180,10000
108,Carlie,220,10000
109,Trixie,325,42000
110,Dominick,75,30000
111,Petey,120,15000
112,Tersina,75,30000
113,Johnathon,90,15000
114,Freddie,180,12000
115,Harmon,220,50000
116,Tracey,75,20000
117,Cherrita,180,33000
118,Stu,60,12000
119,Glenda,220,37000
120,Lorettalorna,220,25000
121,Patrizio,60,15000
122,Linda,88,30000
123,Pippa,325,20000
124,Pen,60,18000
125,Esteban,88,15000
126,Fonzie,325,15000
127,Cindelyn,60,12000
128,Zacharie,75,30000
129,Vina,88,42000
130,Omero,75,10000
131,Tom,75,33000
132,Dante,60,30000
133,Cordy,120,18000
134,Stephenie,220,50000
135,Dunstan,325,20000
136,Gideon,180,15000
137,Johnette,220,10000
138,Brynn,75,50000
139,Yankee,88,42000
140,Corbin,120,42000
141,Coreen,60,18000
142,Tanya,88,30000
143,Jenna,60,25000
144,Flora,90,33000
145,Dianna,90,20000
146,Armand,60,15000
147,Gustie,180,42000
148,Benton,180,12000
149,Lena,325,25000
150,Dot,180,18000
151,Meryl,220,12000
152,Babbie,120,15000
153,Byram,90,42000
154,Bertine,60,25000
155,Osbert,120,42000
156,Tanny,325,42000
157,Maryjo,60,12000
158,Clarie,60,42000
159,Kipp,90,15000
160,Leonie,325,50000
161,Ferdie,120,15000
162,Ofella,90,50000
163,Pascale,220,15000
164,Cathrin,120,30000
165,Sib,60,33000
166,Darleen,220,42000
167,Didi,60,15000
168,Lodovico,60,18000
169,Farley,325,12000
170,Devi,60,25000
171,Clair,180,37000
172,Addy,325,33000
173,Brandon,90,18000
174,Prentiss,60,30000
175,Lorant,88,50000
176,Wanids,325,30000
177,Robbi,75,10000
178,Mellicent,75,50000
179,Lynea,90,20000
180,Nial,325,15000
181,Guillaume,60,37000
182,Loutitia,88,25000
183,Ruthe,325,30000
184,Eric,60,50000
185,Marcellus,180,30000
186,Ian,75,42000
187,Sebastien,75,37000
188,Scarface,220,50000
189,Maible,75,18000
190,Waldon,90,30000
191,Bethina,75,15000
192,Farand,88,42000
193,Zolly,88,25000
194,Philipa,325,42000
195,Roderigo,88,20000
196,Otho,90,20000
197,Alasteir,120,20000
198,Eleonora,120,42000
199,Eliot,60,12000
200,Alana,220,30000
201,Odey,60,20000
202,Yorke,88,15000
203,Cissiee,180,18000
204,Jillana,180,18000
205,Mallorie,88,30000
206,Borden,88,12000
207,Maddie,60,33000
208,Weider,88,50000
209,Asia,325,37000
210,Sayres,88,10000
211,Marcile,120,30000
212,Thomasina,60,42000
213,Darwin,220,18000
214,Nicolina,90,30000
215,Nita,60,12000
216,Nikoletta,120,12000
217,Dwight,220,42000
218,Romola,88,50000
219,Kaile,325,33000
220,Mozes,220,25000
221,Aylmer,325,33000
222,Marina,120,12000
223,Enrico,325,50000
224,Zonda,325,33000
225,Adriano,220,33000
226,Trula,88,30000
227,Adel,180,30000
228,Jeniece,180,15000
229,Tabina,60,10000
230,Liana,60,33000
231,Marmaduke,220,10000
232,Alla,88,30000
233,Peter,120,12000
234,Pietro,75,18000
235,Hiram,88,20000
236,Anastasia,180,18000
237,Cathleen,180,10000
238,Leeanne,120,15000
239,Chet,325,42000
240,Billie,75,37000
241,Alexandra,75,42000
242,Broddie,90,42000
243,Brigham,180,25000
244,Cal,120,42000
245,Donal,75,18000
246,Adam,220,20000
247,Dotty,180,42000
248,Maynard,120,18000
249,Jessee,90,30000
250,Tiphani,88,42000
251,Jenna,180,30000
252,Karlotte,88,20000
253,Norene,220,25000
254,Morris,88,10000
255,Yuri,75,25000
256,Gusty,120,10000
257,Jori,180,12000
258,Sydelle,220,30000
259,Merrile,180,50000
260,Tadd,60,50000
261,Josiah,88,10000
262,Melisa,88,12000
263,Orelee,90,20000
264,Stephen,120,37000
265,Blair,180,50000
266,Arel,88,30000
267,Abbie,75,25000
268,Channa,325,50000
269,Shirl,75,20000
270,Edlin,88,20000
271,Larina,60,18000
272,Duncan,60,37000
273,Bond,180,10000
274,Dyann,75,50000
275,Charmian,60,15000
276,Dru,75,50000
277,Kiel,75,50000
278,Emory,220,15000
279,Alberik,88,50000
280,Koenraad,180,20000
281,Rafaellle,180,50000
282,Edie,325,25000
283,Osbert,325,15000
284,Sidonia,60,10000
285,Bartel,60,37000
286,Jodi,90,30000
287,Ofelia,120,30000
288,Dudley,90,42000
289,Dulcea,75,25000
290,Gordon,60,25000
291,Chalmers,220,10000
292,Christiano,60,50000
293,Russell,220,50000
294,Cleo,120,50000
295,Catriona,60,42000
296,Leigh,90,37000
297,Ddene,220,12000
298,Sayre,90,18000
299,Jody,180,33000
300,Zabrina,88,12000
301,Cos,75,30000
302,Ron,120,20000
303,Charin,180,12000
304,Coleman,220,33000
305,Jacinda,60,50000
306,Silvan,75,12000
307,Renie,90,33000
308,Davide,325,42000
309,Ernestus,60,12000
310,Brnaba,90,37000
311,Tabor,120,37000
312,Lenci,90,42000
313,Franchot,220,12000
314,Charisse,180,50000
315,Timothea,220,20000
316,Angelika,220,50000
317,Web,90,37000
318,Urban,88,10000
319,Fan,90,18000
320,Donaugh,120,12000
321,Wilona,90,25000
322,Richard,90,42000
323,Hilary,90,37000
324,Ad,90,33000
325,Maynord,220,42000
326,Lina,120,12000
327,Nerty,220,20000
328,Matias,60,33000
329,Urbano,60,50000
330,Rosemarie,220,33000
331,Booth,88,15000
332,Eden,75,18000
333,Cornie,75,15000
334,Isak,220,20000
335,Rand,88,20000
336,Dominique,220,37000
337,Lira,60,30000
338,Filbert,325,20000
339,Nona,75,30000
340,Melloney,325,33000
341,Rafaello,180,37000
342,Floria,60,12000
343,Johannes,88,18000
344,Genevra,90,10000
345,Aldric,220,50000
346,Janeta,120,10000
347,Tarra,75,12000
348,Jefferey,220,33000
349,Cassie,88,50000
350,Maiga,120,20000
351,Heddi,325,20000
352,Marieann,325,50000
353,Carita,180,42000
354,Kurtis,88,50000
355,Wilfred,180,20000
356,Isabelle,120,20000
357,Nisse,220,37000
358,Ula,75,50000
359,Tully,88,18000
360,Honor,120,30000
361,Sinclair,60,50000
362,Buddy,120,50000
363,Neilla,180,50000
364,Junie,90,20000
365,Neely,120,20000
366,Klarrisa,180,18000
367,Maryellen,120,37000
368,Clywd,220,33000
369,Deni,60,42000
370,Ingrim,120,30000
371,Franni,325,42000
372,Andy,75,37000
373,Veronica,75,42000
374,Dalis,60,42000
375,Nanni,180,25000
376,Vikky,90,15000
377,Hussein,325,25000
378,Brigg,220,10000
379,Crawford,180,12000
380,Fran,220,30000
381,Silas,90,15000
382,Alister,90,33000
383,George,325,15000
384,Nonnah,120,25000
385,Gayel,90,20000
386,Demeter,88,10000
387,Juliann,90,50000
388,Shauna,120,25000
389,Anna-maria,120,42000
390,Ag,88,50000
391,Sherwin,88,50000
392,Vikki,88,33000
393,Barret,60,10000
394,Gaelan,90,25000
395,Livy,60,20000
396,Iorgos,90,18000
397,Charil,88,33000
398,Easter,88,30000
399,Esdras,120,37000
400,Prince,60,25000
401,Vail,120,33000
402,Rachel,325,12000
403,Bar,88,20000
404,Willa,325,30000
405,Amerigo,88,33000
406,Fredric,325,50000
407,Mikael,220,50000
408,Benson,120,20000
409,Sileas,120,20000
410,Fidelia,60,12000
411,Frayda,60,30000
412,Babita,90,30000
413,Clair,75,42000
414,Morie,180,12000
415,Skylar,325,20000
416,Dennie,75,42000
417,Sibley,60,20000
418,Addia,75,20000
419,Ed,180,18000
420,Lothaire,180,12000
421,Neila,120,15000
422,Jennifer,220,15000
423,Keelby,325,15000
424,Chuck,325,33000
425,Jordan,90,33000
426,Minnnie,180,20000
427,Carine,180,33000
428,Kelly,325,37000
429,Coleman,90,25000
430,Pincus,88,42000
431,Smitty,220,15000
432,Wade,325,12000
433,Emmit,180,12000
434,Brietta,75,42000
435,Wesley,60,10000
436,Felicdad,120,18000
437,Any,60,18000
438,Gardie,90,12000
439,Leelah,325,25000
440,Garold,60,20000
441,Regine,180,10000
442,Tam,220,20000
443,Davon,220,20000
444,Chrissy,180,18000
445,Ozzie,120,20000
446,Rina,325,20000
447,Guy,180,42000
448,Lenora,60,18000
449,Julietta,220,42000
450,Alexandr,220,18000
451,Margalit,75,15000
452,Samara,88,50000
453,Portie,220,15000
454,Korella,325,33000
455,Hilly,325,30000
456,Leeanne,75,10000
457,Arnaldo,180,10000
458,Kassi,325,37000
459,Karen,60,20000
460,Mac,325,20000
461,Anthia,60,37000
462,Marsiella,120,20000
463,Shea,120,12000
464,Liana,90,15000
465,Carley,120,12000
466,Carlye,120,37000
467,Svend,60,25000
468,Kendell,90,25000
469,Chrisy,60,15000
470,Rod,75,50000
471,Ramsay,90,20000
472,Saidee,325,50000
473,Erek,180,10000
474,Salomi,60,10000
475,Coletta,90,50000
476,Abigael,90,12000
477,Mariele,60,33000
478,Brooke,88,20000
479,Benita,90,25000
480,Marissa,90,37000
481,Lionello,60,37000
482,Tori,120,42000
483,Micheil,220,37000
484,Kym,120,20000
485,Melisse,220,10000
486,Bartholomew,120,33000
487,Rorie,220,25000
488,Hedvige,220,37000
489,Dorothea,75,15000
490,Tamarah,88,50000
491,Skipton,75,10000
492,Minny,90,33000
493,Joshia,75,33000
494,Mirilla,180,30000
495,Willey,220,15000
496,Conrado,220,50000
497,Fredia,220,30000
498,Gretchen,180,12000
499,Bibbie,60,37000
500,Warren,220,25000
501,Gabi,220,30000
502,Callie,220,50000
503,Patton,60,15000
504,Karie,75,25000
505,Martguerita,90,50000
506,Lothaire,60,20000
507,Patrice,220,37000
508,Lin,120,12000
509,Cornie,180,42000
510,Irena,180,20000
511,Markos,60,20000
512,Bird,75,18000
513,Lorna,325,42000
514,Vincents,90,25000
515,Torrey,325,42000
516,Pernell,325,50000
517,Danya,180,25000
518,Erda,325,37000
519,Ethe,325,20000
520,Coop,90,37000
521,Sheridan,120,50000
522,Charles,180,42000
523,Eddy,88,12000
524,Janey,120,42000
525,Edan,88,20000
526,Homer,325,10000
527,Eveline,325,37000
528,Helen-elizabeth,220,20000
529,Daveta,180,20000
530,Mort,90,42000
531,Maxi,75,37000
532,Nathalie,120,37000
533,Dennison,325,25000
534,Bunnie,120,33000
535,Frans,88,33000
536,Delmar,325,42000
537,Ced,90,20000
538,Caren,75,12000
539,Christie,88,18000
540,Saunders,325,25000
541,Deny,180,18000
542,Gene,90,15000
543,Margeaux,220,18000
544,Prisca,180,18000
545,Domini,88,18000
546,Henrie,75,50000
547,Marj,120,18000
548,Mab,120,25000
549,Josiah,120,12000
550,Mathe,180,12000
551,Gauthier,88,12000
552,Delmore,180,33000
553,Lynett,120,37000
554,Lucais,90,42000
555,Clarice,180,33000
556,Aeriela,120,37000
557,Babbie,75,15000
558,Caren,90,15000
559,Jessamine,325,18000
560,Hesther,88,15000
561,Sasha,88,15000
562,Erica,120,10000
563,Keith,120,10000
564,Briney,88,12000
565,Rutherford,90,15000
566,Lemmie,325,18000
567,Dur,220,25000
568,Modesta,120,33000
569,Carter,88,33000
570,Retha,220,15000
571,Carma,220,33000
572,Antonella,90,15000
573,Sutherlan,75,10000
574,Phillipe,88,37000
575,Florida,180,37000
576,Corrina,75,15000
577,Adrianne,220,10000
578,Scarlett,325,20000
579,Shel,120,25000
580,Delaney,88,50000
581,Tiphani,220,33000
582,Grier,88,42000
583,Annabell,180,15000
584,Basil,120,12000
585,Horatius,180,18000
586,Umeko,220,30000
587,Hayes,220,10000
588,Lynnette,220,37000
589,Hesther,180,33000
590,Trumaine,325,15000
591,Emlyn,325,50000
592,Corabelle,220,37000
593,Vic,220,25000
594,Cyndia,88,33000
595,Gray,120,42000
596,Dylan,120,30000
597,Isabelle,60,20000
598,Eachelle,180,37000
599,Howard,88,18000
600,Cornall,75,18000
601,Emmalee,90,18000
602,Brian,180,20000
603,Cahra,325,50000
604,Arvin,220,50000
605,Minda,90,15000
606,Dedie,88,33000
607,Lydia,325,15000
608,Joshia,220,25000
609,Bernita,325,15000
610,Sayre,90,33000
611,Pearla,220,20000
612,Fidole,75,30000
613,Evin,325,12000
614,Fredia,60,20000
615,Idalina,120,50000
616,Hetti,75,30000
617,Kirk,180,30000
618,Orson,180,25000
619,Lyndsay,180,42000
620,Lissy,60,37000
621,Odessa,120,50000
622,Hestia,180,18000
623,Dorotea,88,10000
624,Giraud,90,15000
625,Tonya,180,37000
626,Menard,88,37000
627,Nicola,75,12000
628,Maddy,60,25000
629,Mace,88,18000
630,Lyndy,180,37000
631,Ivonne,90,20000
632,Josepha,88,20000
633,Shandra,120,50000
634,Viva,88,25000
635,Sherwin,180,10000
636,Abigail,90,18000
637,Rosalia,60,18000
638,Merissa,60,25000
639,Marylee,60,50000
640,Wolfy,120,33000
641,Maia,220,10000
642,Elinor,60,33000
643,Neron,180,42000
644,Malachi,60,25000
645,Sarajane,60,10000
646,Arlie,88,42000
647,Felike,220,12000
648,Ethan,90,12000
649,Ruthy,180,20000
650,Hugo,60,30000
651,Thorndike,220,10000
652,Cesaro,325,30000
653,Harmonia,75,12000
654,Damara,180,12000
655,Maddy,88,25000
656,Filmer,90,50000
657,Boothe,75,12000
658,Dorrie,120,42000
659,Willdon,220,10000
660,Cindi,325,12000
661,Shermie,120,12000
662,Byrom,180,42000
663,Millie,90,15000
664,Natassia,325,42000
665,Wheeler,60,25000
666,Caritta,88,12000
667,Kennan,120,12000
668,Katina,180,20000
669,Beverlee,60,25000
670,Arlette,220,30000
671,Jacqueline,90,50000
672,Sheila-kathryn,90,10000
673,Lambert,325,42000
674,Lamont,220,33000
675,Immanuel,75,33000
676,Nani,220,50000
677,Galen,60,50000
678,Nilson,88,10000
679,Tomi,60,50000
680,Flore,75,30000
681,Burgess,120,12000
682,Tally,75,42000
683,Jaquenette,60,25000
684,Sly,60,42000
685,Yul,60,30000
686,Rosalyn,325,37000
687,Devondra,75,10000
688,Xenos,88,37000
689,Terrence,75,42000
690,Krystyna,60,50000
691,Krishna,325,50000
692,Zorina,75,18000
693,Baxy,120,20000
694,Terrie,75,42000
695,Justino,220,18000
696,Erhard,75,33000
697,Robbie,120,30000
698,Paddie,90,33000
699,Evelyn,75,10000
700,Abbot,90,33000
701,Tedra,90,33000
702,Rikki,90,12000
703,Alverta,90,25000
704,Pauly,120,30000
705,Ariella,60,12000
706,Lia,120,20000
707,Petronille,75,42000
708,Merle,325,10000
709,Hagan,120,50000
710,Nikolaus,88,30000
711,Cinda,120,42000
712,Matelda,120,18000
713,Roslyn,120,25000
714,Jerrylee,180,10000
715,Lucky,325,42000
716,Elita,90,18000
717,Hyacinthia,90,25000
718,Fina,220,42000
719,Kamila,88,42000
720,Jennie,88,42000
721,Riobard,180,42000
722,Joannes,325,10000
723,Darlene,180,42000
724,Zia,75,42000
725,Cristina,90,15000
726,Jonathon,220,50000
727,Rickie,220,42000
728,Klara,180,50000
729,Osbert,75,33000
730,Emmet,90,37000
731,Cassandry,60,33000
732,Enrica,325,18000
733,Evvy,75,42000
734,Silas,180,20000
735,Kaia,180,25000
736,Arvie,325,15000
737,Keith,180,20000
738,Silvie,120,12000
739,Winnifred,75,10000
740,Chen,325,37000
741,Carleton,75,15000
742,Silvano,220,12000
743,Pancho,88,18000
744,Melonie,90,33000
745,Gordon,325,12000
746,Rosemarie,75,10000
747,Graehme,90,18000
748,Mitchael,90,33000
749,Carola,325,10000
750,Zsa zsa,180,20000
751,Jude,180,12000
752,Arch,180,33000
753,Andrej,88,50000
754,Amber,325,42000
755,Dorian,325,15000
756,Kaitlynn,88,15000
757,Kerianne,220,37000
758,Boycie,88,18000
759,Nanete,90,37000
760,Sidonia,120,10000
761,Galvan,120,33000
762,Lucienne,75,25000
763,Davidson,75,37000
764,Roslyn,180,10000
765,Jenny,180,33000
766,Toby,88,20000
767,Brynne,325,18000
768,Blakeley,325,18000
769,Egan,325,10000
770,Barbey,325,20000
771,Portia,60,33000
772,Alica,60,37000
773,Juliana,180,50000
774,Barde,88,18000
775,Wilie,90,30000
776,Letta,220,10000
777,Ree,90,42000
778,Ingmar,75,18000
779,Melva,120,42000
780,Tootsie,88,25000
781,Felike,75,33000
782,Laughton,325,15000
783,Crosby,60,12000
784,Marianne,60,33000
785,Francine,120,42000
786,Edan,60,50000
787,Fayre,120,18000
788,Adelaida,180,37000
789,Florella,220,25000
790,Noll,120,30000
791,Ki,60,42000
792,Jermayne,75,33000
793,Grayce,325,33000
794,Harv,325,42000
795,Lorianna,60,15000
796,Hersh,180,33000
797,Diahann,88,33000
798,Yelena,180,50000
799,Emmaline,88,37000
800,Daffi,90,12000
801,Janine,60,50000
802,Sheilah,180,42000
803,Lazaro,220,10000
804,Earle,90,30000
805,Fred,88,25000
806,Almira,220,42000
807,Wini,88,37000
808,Emanuel,75,30000
809,Obadias,220,10000
810,Efrem,325,20000
811,Susi,60,18000
812,Maxy,60,15000
813,Agnes,88,42000
814,Obadiah,60,12000
815,Lefty,220,50000
816,Michele,88,42000
817,Cynthia,88,25000
818,Hyatt,220,20000
819,Roch,220,33000
820,Mag,88,12000
821,Trevor,180,10000
822,Jefferey,75,10000
823,Tania,325,42000
824,Mercie,90,42000
825,Andrei,325,10000
826,Yetta,120,25000
827,Angeli,90,20000
828,Norbert,90,20000
829,Conan,180,20000
830,Cale,60,50000
831,Christina,60,37000
832,Olivier,325,20000
833,Oby,325,12000
834,Chad,75,15000
835,Adelle,60,10000
836,Keene,60,25000
837,Corrina,75,50000
838,Hashim,88,50000
839,Oralia,325,10000
840,Wadsworth,325,30000
841,Shelley,60,15000
842,Irv,120,15000
843,Grant,220,33000
844,Bella,88,18000
845,Yardley,60,50000
846,Brendin,120,10000
847,Estella,220,42000
848,Rasia,60,37000
849,Gibb,180,20000
850,Amanda,325,37000
851,Sidoney,220,20000
852,Giacopo,90,18000
853,Eve,180,12000
854,Levon,120,25000
855,Vassili,120,33000
856,Henrieta,180,30000
857,Devlen,120,37000
858,Ophelie,120,37000
859,Abramo,325,37000
860,Fair,60,37000
861,Pietrek,325,25000
862,Holden,180,50000
863,Cherish,90,42000
864,Alonzo,325,12000
865,Devonna,60,18000
866,Rubi,60,18000
867,Emmanuel,220,30000
868,Trumaine,88,42000
869,Malory,220,42000
870,Pearla,220,33000
871,Phelia,60,33000
872,Madonna,120,10000
873,Thomasa,90,18000
874,Estella,325,20000
875,Saw,60,15000
876,Cecil,75,37000
877,Mac,60,25000
878,Ralf,120,12000
879,Barbey,325,12000
880,Josi,120,18000
881,Kenna,120,25000
882,Rina,75,25000
883,Callida,88,33000
884,Lona,220,30000
885,Jan,90,18000
886,Bailey,88,30000
887,Guillermo,75,42000
888,Katlin,88,25000
889,Flo,325,42000
890,Madel,180,12000
891,Conant,75,37000
892,Devland,60,10000
893,Annamarie,120,20000
894,Gabbie,220,42000
895,Frasquito,90,15000
896,Oberon,88,15000
897,Gabriell,120,10000
898,Ki,220,30000
899,Martelle,120,15000
900,Riccardo,90,42000
901,Shaughn,180,50000
902,Coral,120,18000
903,Judas,120,10000
904,Josiah,325,12000
905,Freda,60,42000
906,Lynn,325,37000
907,Tabb,325,50000
908,Brittany,180,18000
909,Leo,88,42000
910,Atlante,120,33000
911,Maurie,180,50000
912,Oren,120,20000
913,Anetta,60,10000
914,Curry,88,20000
915,Tyrone,180,15000
916,Saunder,180,37000
917,Luis,60,12000
918,Alysia,325,37000
919,Calypso,90,12000
920,Gretna,220,42000
921,Odie,90,20000
922,Wenda,90,12000
923,Ezekiel,75,20000
924,Orlan,60,25000
925,Wittie,90,37000
926,Abbie,90,18000
927,Robinia,120,10000
928,Hayden,180,30000
929,Melody,60,20000
930,Emory,325,37000
931,Callie,75,10000
932,Debby,180,18000
933,Gui,325,20000
934,Dorette,120,37000
935,Jillane,90,37000
936,Carolina,88,33000
937,Randy,120,15000
938,Arabel,180,50000
939,Verina,75,37000
940,Josefina,90,30000
941,Nina,120,25000
942,Vernen,120,18000
943,Loria,180,25000
944,Isabeau,88,37000
945,Cherice,220,15000
946,Kimberley,325,18000
947,Martyn,180,25000
948,Agustin,75,25000
949,Clerissa,120,15000
950,Lonna,120,10000
951,Wake,220,25000
952,Edwina,75,42000
953,Lacey,75,50000
954,Laetitia,90,33000
955,Delila,325,20000
956,Sioux,120,12000
957,Floyd,75,15000
958,Trista,75,50000
959,Shaughn,90,15000
960,Zitella,120,42000
961,Ginnie,180,15000
962,Burty,60,12000
963,Arley,120,33000
964,Ansley,75,37000
965,Kirstin,180,12000
966,Karon,88,10000
967,Esme,120,37000
968,Berenice,325,10000
969,Charlie,325,50000
970,Noach,325,12000
971,Mercedes,180,12000
972,Sloan,325,42000
973,Guglielma,120,15000
974,Herrick,75,30000
975,Aleksandr,88,42000
976,Arlina,325,33000
977,Wenonah,325,12000
978,Warner,90,30000
979,Libbey,120,42000
980,Brana,60,10000
981,Genevieve,180,20000
982,Sharai,75,10000
983,Josi,120,12000
984,Pebrook,60,33000
985,Erna,325,33000
986,Ferd,88,25000
987,Mohammed,220,42000
988,Dawn,180,37000
989,Wandie,60,25000
990,Chiarra,325,18000
991,Zaccaria,88,33000
992,Trenna,90,10000
993,Angelia,60,50000
994,Raquela,180,12000
995,Maxi,325,18000
996,Atalanta,90,37000
997,De witt,88,12000
998,Jaye,75,25000
999,Tamarra,60,15000
1000,Saleem,60,20000

#include "Employee.h"
#include <stdio.h>
#include <stdlib.h>

Employee* employee_new()
{

	return (Employee*) malloc(sizeof(Employee));
}


Employee* employee_newParametros(char* idStr,char* nombreStr,char* horasTrabajadasStr)
{
	int largo;
	Employee * nuevoEmpleado;

	nuevoEmpleado = employee_new;

	if(employee_setId(nuevoEmpleado,(atoi(idStr))>0 ||
			employee_setNombre(nuevoEmpleado,nombreStr)>0 ||
			employee_setHorasTrabajadas(nuevoEmpleado,atoi(horasTrabajadasStr))>0))

	nuevoEmpleado->id =idStr;
	nuevoEmpleado->nombre = nombreStr;
	nuevoEmpleado->horasTrabajadas = horasTrabajadasStr;// falta pasar el sueldo ACORDATEEEE

	return nuevoEmpleado;
}

int employee_delate(Employee* this)
{
	int retorno;

	retorno = -1;

	if(this != NULL)
	{
		free(this);
		retorno = 0;
	}
	return retorno;
}

int employee_setId(Employee* this,int id)
{
	int retorno;

	if(this != NULL && id>0)
	{
		this->id = id;
		retorno = 0;
	}

	return retorno;
}

int employee_getid(Employee* this, int id)
{
	int retorno;

	retorno = -1;

	if(this != NULL && id != NULL)
	{
		this->id = retorno;
	}

	return retorno;
}

int employee_setNombre(Employee* this,char* nombre)
{
	int retorno;

	retorno = -1;

	if(this != NULL && nombre != NULL && strlen(nombre)>0)
	{
		strcpy(this->nombre, nombre);
		retorno = 0;
	}
	return retorno;
}


int employee_getNombre(Employee* this,char* nombre)
{
	int retorno;

	retorno = -1;

	if(this != NULL && nombre != NULL && strlen(nombre)>0)
	{
		strcpy(retorno, this->nombre);
	}
	return retorno;
}

int employee_setHorasTrabajadas(Employee* this,int horasTrabajadas)
{
	int retorno;

		retorno = -1;

		if(this != NULL && horasTrabajadas != NULL)
		{
			this->horasTrabajadas = horasTrabajadas;
			retorno = 0;
		}
		return retorno;
}
int employee_getHorasTrabajadas(Employee* this,int* horasTrabajadas)
{
	int retorno;

	retorno = -1;

	if(this != NULL && horasTrabajadas != NULL)
	{
		this->horasTrabajadas = retorno;
	}
	return retorno;
}

int employee_setSueldo(Employee* this,int sueldo)
{
	int retorno;

		retorno = -1;

		if(this != NULL && sueldo != NULL)
		{
			this->sueldo = sueldo;
			retorno = 0;
		}
		return retorno;
}
int employee_getSueldo(Employee* this,int* sueldo)
{
	int retorno;

		retorno = -1;

		if(this != NULL && sueldo != NULL)
		{
			this->sueldo = retorno;
		}
		return retorno;
}

int cargar_idEmpleado(void)
{
	int retorno;

	retorno = -1;

	fopen("id.csv","r");

	fread(&retorno,sizeof(retorno),1,"id.csv");

	return retorno;
}

int cargar_nuevoId(void)
{
	int retorno;

		retorno = -1;

		fopen("id.csv","r");

		fread(&retorno,sizeof(retorno),1,"id.csv");

		return retorno++;
}
